<html>  
<head></head>  
<body>  
<div id="fb-root"></div>  
<script> 
	 
	
    window.fbAsyncInit =function(){  
    FB.init({  
        appId      :'279854420078291',		
        status     :true,// vérifier le statut de connexion  
        cookie     :true,// autoriser les cookies pour permettre au serveur (et le SDK PHP) d'accéder à la session  
        xfbml      :true// analyser le XFBML (déprécié par Facebook, c.f., https://developers.facebook.com/blog/post/568/)  
    }); 
	FB.ui(  
      {  
       method: 'feed',  
       name: 'The Facebook SDK for Javascript',  
       caption: 'Bringing Facebook to the desktop and mobile web',  
       description: (  
          'A small JavaScript library that allows you to harness ' +  
          'the power of Facebook, bringing the user\'s identity, ' +  
          'social graph and distribution power to your site.'  
       ),  
       link: 'https://developers.facebook.com/docs/reference/javascript/',  
       picture: 'http://www.fbrell.com/public/f8.jpg'  
      },  
      function(response) {  
        if (response && response.post_id) {  
          alert('Post was published.');  
        } else {  
          alert('Post was not published.');  
        }  
      }  
    ); 	
	(function(d, s, id){  
         var js, fjs = d.getElementsByTagName(s)[0];  
         if (d.getElementById(id)) {return;}  
         js = d.createElement(s); js.id = id;  
         js.src = "//connect.facebook.net/en_US/all.js";  
         fjs.parentNode.insertBefore(js, fjs);  
       }(document, 'script', 'facebook-jssdk'));  
      
    // Ici on s'abonne à l'évèement JavaScript auth.authResponseChange. Cet évènement est généré pour tout   
    // changement dans l'authentification, comme la connexion, la déconnexion, ou le rafraîchissement de la session.   
    // Donc lorsqu'un utilisateur déjà connecté tente se se connecter à nouveau, le cas correct ci-dessous sera géré  
    FB.Event.subscribe('auth.authResponseChange',function(response){  
        // Est-ce que l'utilisateur est connecté au moment où l'évènement est généré ?   
        if(response.status ==='connected'){  
            console.log("Y'a quelqu'un");  
            // c.f. l'objet response passé en paramète du callback est un objet JSON décrit après ce code.  
            testAPI();  
        } else if (response.status ==='not_authorized'){   
            console.log("Y'a quelqu'un, mais il n'est pas connecté à l'application");  
            // Dans ce cas, la personne est loguée Facebook, mais pas à l'application.  
            // Donc on appelle FB.login() pour afficher la boîte de dialogue de connexion à l'application.  
            // On ferait pas comme ça pour une vrai application, pour deux raisons:  
            // (1) Un popup créé automatiquement par JavaScript serait bloqué par la plupart des navigateurs  
            // (2) c'est pas cool de sauter au cou de l'utilisateur dès le chargement de la page comme ça.  
            FB.login();  
        }else{  
            console.log("l'utilisateur n'est pas connecté à Facebook");  
            // Dans ce cas, la personne n'est pas connectée à Facebook. Donc on appelle la méthode login().  
            // A ce moment, on ne sait pas si l'utilisateur s'est déjà connecté à l'application.  
            // si ils ne se sont jamais connecté à l'application, ils verront la boîte de dialogue de connection  
            // à l'application juste après s'être connecté à Facebook.  
            FB.login();  
        }  
    });
	/*FB.logout(function(response) {  
        // Person is now logged out  
    }); */ 
	FB.login(function(response) {  
		if (response.authResponse) {  
			// La personne s'est connectée  
		} else {  
			// La personne a annulé  
		}  
	}, {scope: 'user_about_me,friends_about_me,publish_actions'});	
	FB.AppEvents.logPageView();	
	
    };  
              
    // Charger le SDK de manière asynchrone (comme pour les boutons j'aime et partager)  
    (function(d){  
        var js, id ='279854420078291', ref = d.getElementsByTagName('script')[0];  
        if(d.getElementById(id)){return;}  
        js = d.createElement('script'); js.id = id; js.async =true;  
        js.src ="//connect.facebook.net/fr_FR/all.js";  
       // ref.parentNode.insertBefore(js, ref);  
    }(document));  
      
    // Ici on fait un requête très simple à l'API Open Graph lorsque l'utilisateur est connecté  
    function testAPI(){  
        console.log('Bienvenue !  On récupère vos informations.... ');  
        FB.api('/111727044088275',function(response){  
            console.log('Bienvenue, '+ response.name +'.');  
        });  
    };
	function onButtonClick() {
  // Add this to a button's onclick handler
  FB.AppEvents.logEvent("App Install");
}
    </script>  
      
    <!--   Ci-dessous, le bouton de connexion classique c'est la meilleur méthode pour laisser l'utilisateur se connecter. Ce bouton actionne la fonction FB.login(). -->  
     
    <script async defer crossorigin="anonymous" src="https://connect.facebook.net/fr_FR/all.js" ></script>
	<div class="fb-login-button" data-size="large" data-button-type="continue_with" data-layout="default" data-auto-logout-link="false" data-use-continue-as="false" ></div>
	<div id="status">
	
	

<!--<button onclick='FB.AppEvents.logEvent("buttonClicked")'>
  Click me
</button>-->
</div>	
</body>  
</html>  
